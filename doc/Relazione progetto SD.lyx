#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{multicol}
\end_preamble
\use_default_options false
\begin_modules
minimalistic
\end_modules
\language english
\inputencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement b
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\bullet 1 0 10 -1
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title

\lang italian
Progetto di sistemi distribuiti
\begin_inset Newline newline
\end_inset


\begin_inset Quotes eld
\end_inset

Almost-Othello
\begin_inset Quotes erd
\end_inset

 multiplayer
\end_layout

\begin_layout Author

\lang italian
di G.
 Benvenuti, G.
 Ledonne, L.
 Leoni
\begin_inset Newline newline
\end_inset

{benvenut | ledonne | lleoni} @ cs.unibo.it
\end_layout

\begin_layout Standard
Questo documento e' la relazione del progetto ed e' composto sostanzialmente
 da tre parti: l'introduzione al gioco e la spiegazione dettagliata delle
 regole, le scelte effettuate in fase di progettazione - p.e.
 stato dei giocatori, informazioni condivise, gestione dei guasti - e le
 strategie implementative - strutturazione delle classi e librerie utilizzate.
 A queste e' aggiunta una parte dedicata ai diagrammi UML.
 Il gioco che e' stato scelto e' la versione multiplayer dell'antico Reversi
 (gioco per due giocatori), leggermente riadattato per rendere quanto possibile
 paritaria la coesistenza di piu' di due giocatori.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
1.
 Introduzione
\end_layout

\begin_layout Standard
Si vuole sviluppare un gioco distribuito con due o piu' giocatori, tutti
 pari fra loro, che condividono uno stato globale condiviso rappresentato
 da una scacchiera - in realta' non e' la classica scacchiera del gioco
 degli scacchi, ma una semplice tabella quadrata con un numero di posizioni
 variabile che dipende dal numero di giocatori.
 Riguardo alle specifiche imposte il sistema tollerera' guasti di tipo crash,
 in un numero pari al numero di giocatori meno il vincitore finale, si potra'
 contare su canali di comunicazine affidabili, e verra' utilizzato RMI,
 e non i socket, per la comunicazione fra i componenti del sistema.
 L'unica forma di centralizzazione e' quella per la registrazione iniziale
 al gioco, che a partita iniziata non sara` piu` necessaria.
\end_layout

\begin_layout Subsection*
2.
 Regole del gioco
\end_layout

\begin_layout Standard
Come accennato in precedenza, il gioco che e' stato scelto e' una versione
 multiplayer del gioco Reversi, un classico per due giocatori che risale
 addirittura alla fine dell'800.
\end_layout

\begin_layout Standard
Per sua natura il Reversi classico non e' estendibile a un numero di giocatori
 diverso da due, in quanto non e' possibile trovare una configurazione iniziale
 imparziale per tutti.
 Ammesso comunque di riuscirci, sarebbe necessaria una configurazione ad
 hoc per ogni numero di giocatori.
 Si e' quindi deciso di applicare il seguente pacchetto di regole:
\end_layout

\begin_layout Itemize
Disposizione iniziale delle pedine, una per giocatore, identificate da colori
 diversi.
 Disposizione random
\end_layout

\begin_layout Itemize
Ogni pedina ha a disposizione due tipi di mossa possibili: colonizza e conquista
\end_layout

\begin_deeper
\begin_layout Itemize
Conquista (
\begin_inset Formula $c_{1}$
\end_inset

) consiste nel porre una pedina del proprio colore in uno degli spazi vuoti
 in modo che una o piÃ¹ pedine di uno o piu' avversari, situate perpendicolarment
e, orizzontalmente, e/o diagonalmente, rimangano chiuse tra quest'ultima
 ed un'altra preesistente del proprio colore.
 Da notare che non devono essere presenti pedine vuote in mezzo al percorso
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename cattura1.eps
	scale 50

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Itemize
Colonizza (
\begin_inset Formula $c_{2}$
\end_inset

) e' l' occupazione di una casella vuota adiacente a una occupada da una
 pedina del proprio colore.
\end_layout

\end_deeper
\begin_layout Itemize
Priorita' delle mosse: 
\begin_inset Formula $c_{1}>c_{2}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Quando e' possibile fare una conquista e' obbligatorio procedere in tale
 modo, inoltre da quel momento non sara' piu' possibile effettuare una colonizza
zione.
 Se, come di solito si verifica nelle fasi iniziali del gioco, i giocatori
 sono separati fra loro e dunque impossibilitati a conquistare, allora si
 puo' procedere con una mossa di colonizzazione.
\end_layout

\end_deeper
\begin_layout Itemize
Il giocatore che non puo' effettuare ne' conquiste ne' colonizzazioni e'
 costretto a cedere il proprio turno di gioco.
\end_layout

\begin_layout Itemize
Quando nessun giocatore puo' effettuare ulteriori mosse, il gioco si dira'
 terminato
\end_layout

\begin_deeper
\begin_layout Itemize
Il vincitore e' colui che avra' collezionato il maggior numero di pedine
 del proprio colore
\end_layout

\end_deeper
\begin_layout Itemize
Il vincitore paga da bere a tutti
\end_layout

\begin_layout Standard
Sono necessarie alcune precisazioni:
\end_layout

\begin_layout Itemize
Una conquista puo' avere la conseguenza di far perdere tutte le pedine ad
 un giocatore, che sara' dichiarato sconfitto e abbandonera' la partita.
\end_layout

\begin_layout Itemize
La conquista riguarda esclusivamente le pedine imprigionate 
\emph on
direttamente
\emph default
 fra la pedina messa sulla scacchiera e la prima pedina del medesimo colore
 posta sulla stessa riga, colonna o diagonale 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename cattura2.eps
	scale 50

\end_inset


\end_layout

\begin_layout Subsection*
3.
 Scelte progettuali
\end_layout

\begin_layout Standard
Il sistema e' stato realizzato implementando due paradigmi di comunicazione:
 client-server e anello unidirezionale.
\end_layout

\begin_layout Standard
Il primo e' stato utilizzato unicamente per realizzare il servizio, centralizzat
o, di registrazione al gioco.
 Il secondo, invece, per realizzare le comunicazioni e il sistema di recovery
 dai guasti.
\end_layout

\begin_layout Standard
Come detto in precedenza, la registrazione e' stata realizzata sfruttando
 il modello client-server.
 Il server e' rappresentato dal servizio centralizzato che raccoglie le
 richieste di partecipazione e provvede alla consegna della lista ordinata
 dei partecipanti una volta raggiunto il numero di giocatori stabilito.
 I client, di conseguenza, sono tutti coloro che intendono partecipare al
 gioco.
 Il server non e' un nodo a se stante, bensi' viene inizializzato assieme
 a una delle macchine partecipanti e il suo indirizzo dovra' quindi essere
 fornito a run-time.
 
\end_layout

\begin_layout Standard
Successivamente a questa fase il sistema funziona secondo il modello ad
 anello unidirezionale.
 Ogni nodo, infatti, puo' comunicare solo e soltanto con il suo successore
 nella lista e riceve messaggi esclusivamente dal suo predecessore.
 I nodi condividono uno stato globale, il tabellone di gioco, e annesse
 informazioni (caselle libere, caselle occupate, proprietari delle caselle,
 ecc).
 Affinche' lo stato globale sia sempre coerente, le operazioni di update
 sono consentite solo al giocatore che possiede il token in quel momento
 - il giocatore a cui tocca effettuare la mossa.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Il nodo che effettua una mossa inoltra un messaggio e attende che questo
 gli venga riconsegnato.
 Questo messaggio, effettuando un giro completo dell'anello, sara' visibile
 a tutti i nodi intermedi, i quali potranno leggerne e processarne il contenuto
 al fine di mantenere coerente lo stato globale.
 Al termine del turno di gioco il nodo passera' il token al suo successore.
\end_layout

\begin_layout Subsection*
4.
 Strategie implementative
\end_layout

\begin_layout Standard
Pur sapendo che la rete ad anello unidirezionale non sia la scelta piu'
 consona per la realizzazione di un sistema distribuito, se ne e' decisa
 l'implementazione poiche' rappresenta un paradigma appropriato per un gioco
 a turni.
 La gestione della comunicazione avviene mediante l'interazione fra le seguenti
 classi:
\end_layout

\begin_layout Itemize
PlayerList
\end_layout

\begin_layout Itemize
Node
\end_layout

\begin_layout Standard
PlayerList rappresenta la lista ordinata dei miei giocatori, e' il frutto
 della fase di registrazione.
 Al suo interno sono presenti un numero variabile di oggetti di tipo Player.
 Ogni oggetto rappresenta la carta d'identita' del singolo nodo, poiche'
 al suo interno sono presenti tutti i dati che lo rappresentano.
 Infatti abbiamo informazioni presentazionali come il nome, di comunicazione
 come indirizzo IP e porta, nonche' un UUID per la sua identificazione univoca.
 All'interno di PlayerList, realizzata come estensione della classe LinkedList,
 sono presenti un numero considerevole di metodi di ricerca/aggiornamento
 della suddetta lista.
 PlayerList viene sfruttata per le comunicazioni inerenti al gioco da parte
 della classe Node e viene riconfigurata in caso di crash da parte della
 classe CrashManager.
 
\end_layout

\begin_layout Standard
Node TODO
\end_layout

\begin_layout Standard
Il modello di messaging adottato prevede due famiglie di messaggi:
\end_layout

\begin_layout Itemize
Cambiamento dello stato di gioco: sono i messaggi di comunicazione della
 mossa e di passaggio del token.
\end_layout

\begin_layout Itemize
Gestione dei guasti: sono i messaggi di ping generati periodicamente e quello
 di notifica dello UUID del nodo appena andato in crash.
\end_layout

\begin_layout Subsection*
5.
 Diagrammi
\end_layout

\begin_layout Subsection*
6.
 Conclusioni
\end_layout

\end_body
\end_document
